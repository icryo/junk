import boto3

# Set AWS access keys
#AWS_ACCESS_KEY_ID = 'ACCESS_KEY'
#AWS_SECRET_ACCESS_KEY = 'SECRET_KEY'
# Create an STS client
sts = session.client('sts')

# Get the account id
account_id = sts.get_caller_identity()['Account']


# Set the region for the EC2 instances
region = 'us-east-1'

# Create a session with the specified access keys and region
session = boto3.Session(
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
    region_name=region
)

# Create an EC2 client
ec2 = session.client('ec2')

# Create an IAM client
iam = session.client('iam')

# Create an SSM client
ssm = session.client('ssm')

# Define the role and policy arn
role_arn = "arn:aws:iam::XXXXXXXXXXXX:role/ssm-role"
#Replace the 'x's in the role_arn variable with the account id
role_arn = role_arn.replace('XXXXXXXXXXXX', account_id)

policy_arn = "arn:aws:iam::aws:policy/AmazonSSMFullAccess"

# List all running instances
response = ec2.describe_instances(Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])
valid_instances = []
for reservation in response["Reservations"]:
    for instance in reservation["Instances"]:
        if "Windows" not in instance["Platform"]:
            valid_instances.append(instance["InstanceId"])

# Attach role and policy to all valid instances
if valid_instances:
    for instance in valid_instances:
        ec2.associate_iam_instance_profile(IamInstanceProfile={'Arn': role_arn}, InstanceId=instance)
        iam.attach_role_policy(RoleName="ssm-role", PolicyArn=policy_arn)
    # Send command to all valid instances
    command = "your command here"
    ssm.send_command(InstanceIds=valid_instances, DocumentName="AWS-RunShellScript", Parameters={"commands":[command]})
    print(f"Sent command to {len(valid_instances)} instances: {valid_instances}")
else:
    print("No valid instances found.")
